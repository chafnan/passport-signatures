// Generated by CoffeeScript 1.6.3
var BadRequestError, Strategy, crypto, passport, util,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

crypto = require('crypto');

passport = require('passport-strategy');

util = require('util');

BadRequestError = require('./errors/BadRequestError');

/*
 Creates an instance of `Strategy`.

 The signature authentication strategy passes authentication with verifying a
 calculated signature.

 This strategy can calculate the signature from the specified order of sources
 that can include anything in the request or headers.

 Examples:

     passport.use(new AnonymousStrategy());

 @constructor
 @api public
*/


Strategy = (function(_super) {
  __extends(Strategy, _super);

  function Strategy(options, verify) {
    var _ref, _ref1;
    this.options = options;
    this.verify = verify;
    if (typeof this.options === 'function') {
      this.verify = this.options;
    }
    if (!this.verify) {
      throw new TypeError('SignatureStrategy requires a verify callback.');
    }
    this._algorithm = (_ref = options.algorithm) != null ? _ref : 'sha1';
    this._encoding = (_ref1 = options.encoding) != null ? _ref1 : 'base64';
    Strategy.__super__.constructor.call(this, this);
    this.name = 'signature';
    this._verify = this.verify;
  }

  Strategy.prototype.authenticate = function(req, options) {
    var createSignature, verified,
      _this = this;
    if (options == null) {
      options = {};
    }
    createSignature = function(signingString, secretKey) {
      var digest;
      digest = crypto.createHmac(_this._algorithm, secretKey).update(signingString).digest(_this._encoding);
      return new Buffer(digest).toString(_this._encoding);
    };
    verified = function(err, user, signature, signingString, secretKey, info) {
      var createdSignature, failMessage, _ref;
      if (err) {
        return _this.error(err);
      }
      if (!user) {
        return _this.fail(info);
      }
      createdSignature = createSignature(signingString, secretKey);
      failMessage = (_ref = options.signatureMismatchMessage) != null ? _ref : 'Signatures do not match';
      if (signature !== createdSignature) {
        return _this.fail(failMessage);
      }
      return _this.success(user, info);
    };
    this._verify(req, verified);
  };

  return Strategy;

})(passport.Strategy);

module.exports = Strategy;
